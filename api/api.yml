openapi: 3.0.0
info:
  description: This is a simple API
  version: "iter_1"
  title: Baltic API
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
- name: launcher
  description: Launching applications
- name: library
  description: Keeping track of all applications
- name: machine manager
  description: Managing all clients
- name: machine
  description: Our client on machine
- name: payments
  description: Keeping users finances
- name: logger
  description: Logger
- name: auth
  description: OAuth server
paths:
  /launcher/applications:
    get:
      tags:
      - launcher
      summary: searches apps in library
      operationId: listUserApplications
      responses:
        '200':
          description: applications array
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ComputationApplication'
  /launcher/computations:
    get:
      tags:
      - launcher
      summary: gets all computations
      operationId: listComputations
      responses:
        '200':
          description: search results
    post:
      tags:
      - launcher
      summary: run application
      operationId: run application
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ComputationApplication'
      responses:
        '200':
          description: .
  /library/applications:
    get:
      tags:
      - library
      summary: get all applications
      operationId: listApplications
      responses:
        '200':
          description: get all applications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ComputationApplication'
    post:
      tags:
      - library
      summary: add application
      operationId: addApplication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Runnable'
      responses:
        '201':
          description: created resource
  /machine-manager/computations:
    post:
      tags:
      - machine manager
      summary: run computation on machine
      operationId: runComputations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Computation'
      responses:
        '200':
          description: application ran successfully
  /machine-manager/machines:
    get:
      tags:
      - machine manager
      summary: get registered machines
      operationId: getMachines
      responses:
        '200':
          description: list of machines
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Machine'
    post:
      tags:
      - machine manager
      summary: create machine
      operationId: createMachine
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Machine'
      responses:
        '200':
          description: machine created successfully
  /machine-manager/machines/{id}:
    post:
      tags:
      - machine manager
      summary: report machine metrics
      operationId: bumpMachine
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MachineMetrics'
      responses:
        '200':
          description: metrics reported successfully
    delete:
      tags:
      - machine manager
      summary: unregister machine
      operationId: unregisterMachine
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      responses:
        '200':
          description: machine deleted succcessfully
  /machine/status/health:
    get:
      tags:
      - machine
      summary: get machine health
      operationId: healthCheck
      responses:
        '200':
          description: everything is OK
        '503':
          description: service unavailable
  /machine/computation:
    get:
      tags:
      - machine
      summary: get current computation status
      operationId: getComputation
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Computation'
    post:
      tags:
      - machine
      summary: run computation on machine
      operationId: runComputation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Computation'
      responses:
        '200':
          description: application ran successfully
    delete:
      tags:
      - machine
      summary: cancel current computation
      operationId: cancelComputation
      responses:
        '200':
          description: computation canceled
  /payments/balance:
    get:
      tags:
      - payments
      summary: get current user balance
      operationId: getBalance
      responses:
        '200':
          description: user balance
    post:
      tags:
      - payments
      summary: changes user balance
      operationId: changeBalance
      responses:
        '200':
          description: search results matching criteria
  /logger/log:
    post:
      tags:
      - logger
      operationId: log
      responses:
        '201':
          description: Logged successfully
  /auth/auth:
    get:
      tags:
      - auth
      operationId: auth
      responses:
        '302':
          description: Redirect to OAuth provider
  /auth/token:
    post:
      tags:
      - auth
      operationId: requestToken
      responses:
        '200':
          description: Authorisation token (Bearer)
servers:
- url: 'https://virtserver.swaggerhub.com/Velox-Digitis/baltic/1.0.0'
components:
  schemas:
    ComputationApplication:
      type: object
      required:
      - id
      - name
      properties:
        id:
          type: string
          example: 3142
        name:
          type: string
          example: SuperApp
        description:
          type: string
          example: This app allows multiplying large matrices
        icon:
          type: string
          example: https://imgur.com/exapmle
    ComputationApplicationInput:
      type: object
      properties:
        properties:
          type: object
        logger:
          type: string
          example: http://mylogger.com/log
    Runnable:
      required:
      - application
      - url
      - schema
      properties:
        application:
          $ref: '#/components/schemas/ComputationApplication'
        version:
          type: string
          example: 1.2.3-beta.4
        url:
          type: string
          example: library/applications/sample-app.zip
        schema:
          type: array
          items:
            $ref: '#/components/schemas/RunnableField'
        command:
          type: string
          example: ./run.sh
    RunnableField:
      type: object
      required:
      - name
      - type
      properties:
        name:
          type: string
          example: name
        type:
          type: string
          example: string
        defaultValue:
          nullable: true
          example: null
          description: default value when running app
    Computation:
      type: object
      required:
      - id
      - runnable
      - logger
      - input
      properties:
        id:
          type: string
          example: 9f0658ce-ea44-11e9-81b4-2a2ae2dbcce4
        appUserId:
          type: string
          example: 234565432
        runnable:
          $ref: '#/components/schemas/Runnable'
        logger:
          type: string
          example: https://my-domain.pl/log
        input:
          $ref: '#/components/schemas/ComputationApplicationInput'
    Machine:
      type: object
      required:
      - id
      properties:
        id:
          type: string
          example: 13234
        supplierId:
          type: string
          example: 12345643
        metrics:
          $ref: '#/components/schemas/MachineMetrics'
    MachineMetrics:
      type: object
      properties:
        cpus:
          type: array
          items:
            $ref: '#/components/schemas/MachineMetricValue'
        gpus:
          type: array
          items:
            $ref: '#/components/schemas/MachineMetricValue'
        memory:
          $ref: '#/components/schemas/MachineMetricValue'
        localStorage:
          $ref: '#/components/schemas/MachineMetricValue'
    MachineMetricValue:
      type: object
      required:
      - max
      properties:
        current:
          type: integer
          example:  0
        max:
          type: integer
          example: 100