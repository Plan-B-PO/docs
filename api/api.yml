openapi: 3.0.0

info:
  description: This is a simple API
  version: "iter_1a"
  title: Baltic API
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'

tags:
- name: launcher
  description: Launching applications
- name: library
  description: Keeping track of all applications
- name: machine manager
  description: Managing all clients
- name: machine
  description: Our client on machine
- name: logger
  description: Logger
- name: queue
  description: Queue
- name: auth
  description: OAuth server https://auth0.com/

paths:

  /launcher/app-user/applications:
    get:
      tags:
      - launcher
      summary: searches apps in library
      operationId: listUserApplications
      security:
      - OAuth2: [appuser]
      responses:
        '200':
          description: applications array
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ComputationApplication'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /launcher/app-user/computations:
    get:
      tags:
      - launcher
      summary: gets my computations
      operationId: listComputations
      security:
      - OAuth2: [appuser]
      responses:
        '200':
          description: applications array
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ComputationTask'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
      - launcher
      summary: run application
      operationId: run application
      security:
      - OAuth2: [appuser]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ComputationTask'
      responses:
        '202':
          description: Application ran successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /launcher/app-user/computations/{id}:
    get:
      tags:
      - launcher
      summary: Get computation details
      operationId: getComputationDetails
      security:
      - OAuth2: [appuser]
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      responses:
        '200':
          description: computation details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComputationDetails'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/EntityNotFoundError'
    delete:
      tags: 
      - launcher
      summary: Stop computation
      operationId: stopComputation
      security:
      - OAuth2: [appuser]
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      responses:
        '202':
          description: computation stopped
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/EntityNotFoundError'
  /launcher/app-user/computations/{id}/logs:
    get:
      tags:
      - launcher
      operationId: getComputationLogs
      security:
      - OAuth2: [appuser]
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      - in: query
        name: from
        schema:
          type: string
      - in: query
        name: to
        schema:
          type: string
      - in: query
        name: filter
        schema:
          type: string
      responses:
        '200':
          description: Logs array
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Log'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/EntityNotFoundError'
      
  /launcher/app-user/cockpit:
    get:
      tags:
      - launcher
      summary: Get applications in cockpit
      security:
      - OAuth2: [appuser]
      responses:
        '200':
          description: Applications list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ComputationApplication'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
      - launcher
      summary: Add application to cockpit
      security:
      - OAuth2: [appuser]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationRequest'
      responses:
        '201':
          description: Application added
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /launcher/app-user/cockpit/{id}:
    delete:
      tags:
      - launcher
      summary: Remove application from cockpit
      operationId: removeApplicationFromCockpit
      security:
      - OAuth2: [appuser]
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      responses:
        '204':
          description: Application removed
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/EntityNotFoundError'
  /launcher/app-user/rack:
    get:
      tags:
      - launcher
      summary: Get Computation Rack
      operationId: getComputationRack
      security:
      - OAuth2: [appuser]
      responses:
        '200':
          description: Computations list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ComputationTask'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
      - launcher
      summary: Add to Computation Rack
      operationId: addToComputationRack
      security:
      - OAuth2: [appuser]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ComputationTask'
      responses:
        '201':
          description: CT successfully added
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /launcher/app-user/rack/{id}:
    get:
      tags:
      - launcher
      summary: Show CT details
      operationId: showTaskDetails
      security:
      - OAuth2: [appuser]
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      responses:
        '200':
          description: Task details
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/ComputationTask'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/EntityNotFoundError'
    delete:
      tags:
      - launcher
      summary: Remove CT from Computation Rack
      operationId: removeTaskFromComputationRack
      security:
      - OAuth2: [appuser]
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      responses:
        '204':
          description: Task removed
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/EntityNotFoundError'
  /library/launcher/applications:
    get:
      tags:
      - library
      summary: get all applications
      operationId: listApplications
      responses:
#        '200':
#          description: get all applications
#          content:
#            application/json:
#              schema:
#                type: array
#                items:
#                  $ref: '#/components/schemas/ComputationApplication'
#        '401':
#          $ref: '#/components/responses/InvalidMachineCredentials'
        '501':
          $ref: '#/components/responses/NotSupportedApiError'
  /library/launcher/applications/{id}:
    get:
      tags:
      - library
      summary: get application
      operationId: getApplication
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      responses:
#        '200':
#          description: application with id
#          content:
#            application/json:
#              schema:
#                  $ref: '#/components/schemas/ComputationApplication'
#        '401':
#          $ref: '#/components/responses/InvalidMachineCredentials'
#        '404':
#          $ref: '#/components/responses/EntityNotFoundError'
        '501':
          $ref: '#/components/responses/NotSupportedApiError'
  /machine-manager/launcher/computations:
    post:
      tags:
      - machine manager
      summary: run computation on machine
      operationId: runComputation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ComputationTask'
      responses:
        '201':
          headers:
            location:
              schema:
                type: string
                example: /machine-manager/launcher/computations/12333
                description: url of created computation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Computation'
          description: application ran successfully
        '401':
          $ref: '#/components/responses/InvalidMachineCredentials'
        '404':
          description: no machine is available
  /machine-manager/launcher/computations/{id}:
    get:
      tags:
      - machine manager
      summary: get computation status
      operationId: getComputationStatus
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      responses:
        '200':
          description: computation status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComputationStatus'
        '401':
          $ref: '#/components/responses/InvalidMachineCredentials'
        '404':
          $ref: '#/components/responses/EntityNotFoundError'
    delete:
      tags:
      - machine manager
      summary: cancel computation
      operationId: cancelComputation
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      responses:
        '202':
          description: computation canceled
        '401':
          $ref: '#/components/responses/InvalidMachineCredentials'
        '404':
          $ref: '#/components/responses/EntityNotFoundError'

  /machine-manager/management/machines:
    get:
      tags:
      - machine manager
      summary: get registered machines
      operationId: getMachines
      security:
      - OAuth2: [supplier]
      responses:
        '200':
          description: list of machines managed by user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Machine'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    post:
      tags:
      - machine manager
      summary: machine register
      operationId: registerMachine
      security:
      - OAuth2: [supplier]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MachineRequest'
      responses:
        '201':
          description: Machine register successfull
          content:
            text/plain:
              schema:
                type: string
                example: 152623621625326
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /machine-manager/management/machines/{id}:
    get:
      tags:
      - machine manager
      summary: get machine
      operationId: getMachine
      security:
      - OAuth2: [supplier]
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      responses:
        '200':
          description: machine
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Machine'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/EntityNotFoundError'
    delete:
      tags:
      - machine manager
      summary: delete machine
      operationId: deleteMachine
      security:
      - OAuth2: [supplier]
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      responses:
        '204':
          description: machine deleted
        '400':
          description: validation error
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/EntityNotFoundError'

  /machine-manager/machines/initial-connect:
    post:
      tags:
      - machine manager
      summary: it's used to give machine its id
      operationId: initailConnectMachine
      security:
      - MachineAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MachineComputingStatus'
      responses:
        '301':
          description: Metrics reported successfully
          headers:
            location:
              schema:
                type: string
                example: /machine-manager/machines/status/46362724
                description: url for a machine to report its status
        '401':
          description: Invalid token

  /machine-manager/machines/status/{id}:
    post:
      tags:
      - machine manager
      summary: Report machine metrics and computing status. It is used to register machine state and computation state in machine manager.
      operationId: bumpMachine
      security:
      - MachineAuth: []
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MachineComputingStatus'
      responses:
        '200':
          description: Metrics reported successfully
        '401':
          description: Invalid token
        '404':
          $ref: '#/components/responses/EntityNotFoundError'

  /machine/status:
    get:
      tags:
      - machine
      summary: get machine health
      operationId: healthCheck
      responses:
        '200':
          description: everything is OK
          content:
            text/plain:
              schema:
                type: string
                enum: [waiting, working]
        '401':
          $ref: '#/components/responses/InvalidMachineCredentials'
  /machine/computation/{computationId}:
    get:
      tags:
      - machine
      summary: get current computation status
      operationId: getComputation
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      responses:
        '200':
          description: current computation details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Computation'
        '401':
          $ref: '#/components/responses/InvalidMachineCredentials'
        '404':
          $ref: '#/components/responses/EntityNotFoundError'
    post:
      tags:
      - machine
      summary: run computation on machine
      operationId: runMachineComputation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ComputationTask'
      responses:
        '200':
          description: application ran successfully
        '401':
          $ref: '#/components/responses/InvalidMachineCredentials'
    delete:
      tags:
      - machine
      summary: cancel current computation
      operationId: cancelMachineComputation
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      responses:
        '204':
          description: computation canceled
        '401':
          $ref: '#/components/responses/InvalidMachineCredentials'
        '404':
          $ref: '#/components/responses/EntityNotFoundError'

  /logger/machine/computation/{id}/logs:
    post:
      tags:
      - logger
      operationId: log
      security:
      - MachineAuth: []
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      responses:
        '201':
          description: Logged successfully
        '401':
          $ref: '#/components/responses/InvalidMachineCredentials'

  /logger/launcher/computation/{id}/logs:
    get:
      tags:
      - logger
      operationId: getLogs
      security:
      - OAuth2: [appuser]
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      - in: query
        name: from
        schema:
          type: string
      - in: query
        name: to
        schema:
          type: string
      - in: query
        name: filter
        schema:
          type: string
      responses:
        '200':
          description: Logs array
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Log'
        '401':
          $ref: '#/components/responses/InvalidMachineCredentials'
        '404':
          $ref: '#/components/responses/EntityNotFoundError'


  /queue/topics:
    post:
      tags:
      - queue
      operationId: createTopic
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ComputationTopic'
      responses:
        '201':
          description: Topic created successfully
        '401':
          $ref: '#/components/responses/InvalidMachineCredentials'

  /queue/topics/{computation}/{step}:
    get:
      tags:
      - queue
      operationId: consume
      security:
      - MachineAuth: []
      parameters:
      - in: path
        name: computation
        schema:
          type: string
        required: true
      - in: path
        name: step
        schema:
          type: string
        required: true
      responses:
        '200':
          description: Message
        '401':
          $ref: '#/components/responses/InvalidMachineCredentials'
        '404':
          description: No messages
    post:
      tags:
      - queue
      operationId: produce
      security:
      - MachineAuth: []
      parameters:
      - in: path
        name: computation
        schema:
          type: string
        required: true
      - in: path
        name: step
        schema:
          type: string
        required: true
      responses:
        '201':
          description: Created message
        '401':
          $ref: '#/components/responses/InvalidMachineCredentials'

  /auth/authorize:
    get:
      tags:
      - auth
      operationId: authorize
      parameters:
      - in: query
        name: audience
        schema:
          type: string
      - in: query
        name: scope
        schema:
          type: string
      - in: query
        name: response_type
        schema:
          type: string
      - in: query
        name: client_id
        schema:
          type: string
      - in: query
        name: state
        schema:
          type: string
      - in: query
        name: redirect_uri
        schema:
          type: string
      - in: query
        name: connection
        schema:
          type: string
      - in: query
        name: prompt
        schema:
          type: string
      responses:
        '302':
          description: Redirected with code
  /auth/oauth/token:
    post:
      tags:
      - auth
      operationId: getToken
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                grant_type:
                  type: string
                client_id:
                  type: string
                client_secret:
                  type: string
                code:
                  type: string
                redirect_uri:
                  type: string
              required:
                - grant_type
                - client_id
                - client_secret
                - code
      responses:
        '200':
          description: Authorized successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '401':
          description: Unauthorized
  
servers:
  - url: 'https://virtserver.swaggerhub.com/Velox-Digitis/baltic/1.0.0'
components:

  securitySchemes:
    MachineAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://baltic.lsc/oauth/authorize
          tokenUrl: https://baltic.lsc/oauth/token
          scopes:
            appuser: App user
            supplier: Supplier
            admin: Grants access to admin operations

  responses:
    UnauthorizedError:
      description: Authentication information is missing or invalid
    InvalidMachineCredentials:
      description: Invalid referer or authentication credentials
    EntityNotFoundError:
      description: Entity with given id has not benn found
    NotSupportedApiError:
      description: Endpoint not supported for this iteration

  schemas:
    ComputationTask:
      type: object
      required:
        - id
        - name
        - userId
        - application
      properties:
        id:
          type: string
          example: 3214
        userId:
          type: string
          example: 23425
        name:
          type: string
          example: My computation
        application:
          $ref: '#/components/schemas/ComputationApplication'
        input:
          $ref: '#/components/schemas/ComputationInput'
        package:
          $ref: '#/components/schemas/ComputationStepPackage'
    ComputationApplication:
      type: object
      required:
      - id
      - name
      properties:
        id:
          type: string
          example: 3142
        name:
          type: string
          example: SuperApp
        description:
          type: string
          example: This app allows multiplying large matrices
        icon:
          type: string
          example: https://imgur.com/exapmle
        schema:
          type: array
          items:
            $ref: '#/components/schemas/ComputationStepParam'
    ComputationInput:
      type: object
      properties:
        properties:
          type: object
        logger:
          type: string
          example: http://mylogger.com/log
    ComputationStepPackage:
      required:
      - computationSteps
      - applicationId
      properties:
        applicationId:
          type: string
          example: 2135144
        computationSteps:
          type: array
          items:
            $ref: '#/components/schemas/ComputationStep'
        version:
          type: string
          example: 1.2.3-beta.4
    ComputationStep:
      required:
        - applicationId
        - command
      properties:
        params:
          type: array
          items:
            $ref: '#/components/schemas/ComputationStepParam'
        artifactUrl:
          type: string
          example: https://ext-repo.com/applications/sample-app.zip
        command:
          type: string
          example: ./run.sh
    ComputationStepParam:
      type: object
      required:
      - name
      - type
      properties:
        name:
          type: string
          example: name
        type:
          type: string
          example: string
        defaultValue:
          nullable: true
          example: null
          description: default value when running app
    Computation:
      type: object
      required:
      - id
      - runnable
      - input
      properties:
        id:
          type: string
          example: 9f0658ce-ea44-11e9-81b4-2a2ae2dbcce4
        appUserId:
          type: string
          example: 234565432
        runnable:
          $ref: '#/components/schemas/ComputationStepPackage'
        input:
          $ref: '#/components/schemas/ComputationInput'
    MachineComputingStatus:
      type: object
      properties:
        machineMetrics:
          $ref: '#/components/schemas/MachineMetrics'
        computationStatuses:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ComputationStatus'
    Machine:
      type: object
      required:
      - id
      properties:
        id:
          type: string
          example: 13234
        name:
          type: string
          example: testMachine
        supplierId: 
          type: string
          example: 12345643
        status:
          type: string
          enum: [UNKNOWN, WAITING, WORKING, ERROR]
        metrics:
          $ref: '#/components/schemas/MachineMetrics'
    MachineRequest:
      type: object
      properties:
        cpus:
          type: integer
        gpu:
          type: integer
        memory:
          type: integer
        localStorage:
          type: integer
        supplierId:
          type: string
        name:
          type: string
    MachineMetrics:
      type: object
      properties:
        cpus:
          type: array
          items:
            $ref: '#/components/schemas/MachineMetricValue'
        gpus:
          type: array
          items:
            $ref: '#/components/schemas/MachineMetricValue'
        memory:
          $ref: '#/components/schemas/MachineMetricValue'
        localStorage:
          $ref: '#/components/schemas/MachineMetricValue'
    MachineMetricValue:
      type: object
      required:
        - max
      properties:
        current:
          type: integer
          example:  0
        max:
          type: integer
          example: 100
    ComputationTopic:
      type: object
      required:
      - computation
      - step
      properties:
        computation:
          type: string
          example: computation1
        step:
          type: string
          example: step1
    ApplicationRequest:
      type: object
      required:
      - id
      properties:
        id:
          type: string
          example: 3142
    Log:
      type: object
      required:
      - timestamp
      - message
      - level
      properties:
        timestamp:
          type: string
        message:
          type: string
        level:
          type: string
          enum: [INFO, WARN, ERROR, DEBUG, TRACE]
    ComputationStatus:
      type: object
      required:
      - status
      properties:
        status:
          type: string
          enum: [WAITING, IN_PROGRESS, CANCELED, DONE]
    ComputationDetails:
      allOf:
        - $ref: '#/components/schemas/ComputationTask'
        - $ref: '#/components/schemas/ComputationStatus'
    TokenResponse:
      type: object
      required:
      - access_token
      - refresh_token
      - id_token
      - token_type
      - expires_in
      properties:
        access_token:
          type: string
          enum: [authorization_code, refresh_token]
        refresh_token:
          type: string
        id_token:
          type: string
        token_type:
          type: string
        expires_in:
          type: integer
